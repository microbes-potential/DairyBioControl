# utils/parsing.py
import base64, re
from io import StringIO
from typing import List, Dict, Optional
from Bio import SeqIO  # install via requirements

GENBANK_EXTS = (".gb", ".gbk", ".gbff", ".genbank")
PROTEIN_FASTA_EXTS = (".faa", ".faa.gz")

def is_genbank(fn: str) -> bool:
    return (fn or "").lower().endswith(GENBANK_EXTS)

def is_protein_fasta(fn: str) -> bool:
    return (fn or "").lower().endswith(PROTEIN_FASTA_EXTS)

def detect_annotator_from_text(text: str) -> Optional[str]:
    """Best-effort annotator detection; do NOT hard-fail if None."""
    tl = (text or "").lower()
    # Be more permissive with markers
    if "prokka" in tl or "annotation::prokka" in tl or "prokka_version" in tl:
        return "prokka"
    if "pgap" in tl or "ncbi prokaryotic genome annotation" in tl or "generated by ncbi" in tl:
        return "pgap"
    return None

def parse_contents(contents: str) -> str:
    if not contents:
        return ""
    try:
        _, payload = contents.split(",", 1)
    except ValueError:
        return ""
    decoded = base64.b64decode(payload)
    try:
        return decoded.decode("utf-8", errors="ignore")
    except Exception:
        return decoded.decode("latin-1", errors="ignore")

def parse_genbank_features(text: str) -> List[Dict]:
    feats: List[Dict] = []
    try:
        for rec in SeqIO.parse(StringIO(text), "genbank"):
            for feat in getattr(rec, "features", []):
                if getattr(feat, "type", "") not in ("CDS", "gene"):
                    continue
                q = getattr(feat, "qualifiers", {}) or {}
                gene = (q.get("gene", [""])[0]).strip() if q.get("gene") else ""
                locus_tag = (q.get("locus_tag", [""])[0]).strip() if q.get("locus_tag") else ""
                product = (q.get("product", [""])[0]).strip() if q.get("product") else ""
                KO = ""
                for x in q.get("db_xref", []):
                    if isinstance(x, str) and x.startswith("KO:"):
                        KO = x.split(":", 1)[-1].strip()
                        break
                EC = (q.get("EC_number", [""])[0]).strip() if q.get("EC_number") else ""
                trans = (q.get("translation", [""])[0]) if q.get("translation") else ""
                trans = re.sub(r"[\s\r\n]+", "", trans)

                # --- fallback: infer gene token from product if gene is blank ---
                if not gene and product:
                    last = re.split(r"[ ,;/()\[\]]+", product.strip())[-1]
                    if last and len(last) <= 12 and re.search(r"[A-Za-z]", last):
                        gene = last

                loc = getattr(feat, "location", None)
                start = int(getattr(loc, "start", 0))
                end = int(getattr(loc, "end", 0))
                strand = int(getattr(loc, "strand", 0) or 0)
                feats.append({
                    "gene": gene, "product": product, "KO": KO, "EC": EC, "translation": trans,
                    "locus_tag": locus_tag, "start": start, "end": end, "strand": strand
                })
    except Exception:
        # swallow and let fallback (empty) be returned
        pass
    return feats

def parse_protein_fasta_features(text: str) -> List[Dict]:
    feats: List[Dict] = []
    try:
        for rec in SeqIO.parse(StringIO(text), "fasta"):
            seq = str(rec.seq or "")
            feats.append({
                "gene": (str(rec.id) or "").strip(),
                "product": (str(rec.description) or "").strip(),
                "KO": "", "EC": "",
                "translation": re.sub(r"[\s\r\n]+", "", seq),
                "locus_tag": "", "start": 0, "end": 0, "strand": 0
            })
    except Exception:
        pass
    return feats

